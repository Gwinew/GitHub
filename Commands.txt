A few needed commands for cmd, Unix, vim, and especially GIT.
__________________________________________________
Commands cmd:

Hint 1:		If you want help, you can use the /? after each command. For example: dir /?
Hint 2:		When <name_catlog> or <name_file> has white space, you should use "..." for example: "name files".txt
Hint 3:		Click Tab when you want to see promt (after command) for example: cd <click tab> cd "name files".txt


D:				- change to the partition D:\

dir 				- It shows what you have in the catalog where you are (without hide folders etc.)
	dir /A:			- It shows catalogs in specific attributes: D-catalog, (H)-hidden files, S-(s)ystem files etc.
	dir /O:			- sorts catalogs: N-according to (n)ames alphabetically, E-acc. to (e)xtension alph., G-catalogs on the beginning, S-acc. to size (from small), D- acc. to (d)ate (from older)
	dir /P			- Stop showing after the screen is full
	dir /X			- It shows shorts names for files
	dir *.txt		- It shows only files with extension .txt

cd <name_catalog>		- (change directory): go to <name_catalog> catalog when you "see" that catalog or you can use "cd C:\" to go to disc C: or you can use "cd C:\...\... to go to catalog from the path
cd ~				- go to /home/username
cd ..				- go to up/previous catalog

mkdir (or md) <name_catalog>	- (Make directory): create a new catalog

copy con <name>.txt		- Create a new file <name>.txt: After <enter> you can write sentence (when you click enter in this mode, you create a new line to writing). When you want to quit in this mode you must clich <ctr+z> and click <enter>, than you finish a creating file .txt.

echo <something> >> <name>.txt	- Create a new file <name>.txt with one line text <something>. When use > you can overwrite first line in <name>.txt or use >> to add new line.

del <name>.txt			- Deleting file. In this example <name>.txt

rmdir (or rd) <path>		- Removes (deletes) a directory. You can use /S-Removes all directories and files inside or /Q-Quiet mode, do not ask if ok to remove a direcory tree. For example rd /s C:\<name>

___________________________________________________
Commands Unix:

touch <name>.txt		- Create a new file <name>.txt

___________________________________________________
Commands Vim:

i			- Insert: you can write something do you want.
<Esc>			- Exit from Insert mode.
:x			- I don't know what is this, but is working: Your comments is saving and quit from Vim.
:wq			- Save and quit...


____________________________________________________
Commands git:

-----------------------
Create a new repository:

git init				- initiation git in a specific folder (one folder - one repository in github)
git init --bare				- remote repository in this local catalog without working directory.

git clone <https://path to repository>	- Cloning repository to your local position in your computer. When you go to enter this folder you are in repository (with git init without write this command "git init").
git clone <https://path to repo> Repo	- Cloning repository to catalog "Repo".

After git init, before everything else:

git config --global user.name "Name"
git config --global user.email email@email.com

-----------------------------------------------------
Operational commands in raw section after git init:



git status 				- You can shows: What branch you are one; Changes to be committed; Untracking files.

git remote add <origin> <https://path.>	- You add path to repository and call it <origin>. You can rename <origin> to something else, for example "qwe". From now your repository is saved as <origin> 
git remote rename <origin> <neworigin>	- Renames your <origin> to <neworigin>
git remote				- It shows your servers configurate <origin>
git remote -v				- It shows your servers configurate <origin> and <https://path to repository>
git remote show <origin>		- It shows you details about <origin>
git remote rm <neworigin>		- You can remove <new origin>

git pull 				- You are download a status from remote repository when you are tracking repository. This is function fetch+merge
git pull <origin> <branch>		- You are download a status from <origin> and from <branch>

git fetch <origin>			- Updates with repository, but you must merge yourself on manualy.
git fetch <origin> <branch>		- Updates with repository and with specific <branch>, but you must merge yourself on manualy.

git merge <origin/master>		- When you in (e.g.) <master> you can merge local with remote <origin/master> repository.

git diff <source_branch> <target_branch>- Before the merge you can show changes what you made

git ls-files				- You can shows files in your local repository.

git branch				- It shows list available branch
git branch <newbranch>			- Add a new branch <newbranch>
git branch -D <new branch>		- Delete <new branch> 

git checkout <branchname>		- Change current branch to <branchname>

--------------------------------------------------------------------------------------
Operational commands in add/rm section after git init when you have files inside local:


git stash				- Saved working directory to stash. Stash is a place where files belong between branches
git stash pop				- Get from stash files to your current branch
git stash push -m "..."			- Saved working directory with commit to stash
git stash list				- changes list in stash
git stash push -m "..." -u		- add a new files with commit to stash because command <git stash> doesn't work with a new files.
git stash apply stash@{...}		- Recovery files from stash (specific list number) stash  and keep in stash
git stash pop stash@{...}		- Recovery files from stash from the list number and delete in stash
git stash drop stash@{...}		- Delete a concret stash number
git stash clear				- Remove all stash number

git stash branch <name>			- Create a new brnach <name> and moving stash content to new branch

git clean				- Remove untracket files -but this is not working, becouse you must use flags
git clean -n				- It show you what files you remove - like test run
git clean -nd				- It show you what files and cataloges you remove - like test run
git clean -idf				- Interactive mode to remove files and cataloges - after press "4" programs aks you which files/cataloges do you want to remove


git add <name_file>			- Add <name_file> to the stage
git add .				- Add all files to the stage

git reset				- After add files to the stage we can remove all files from the stage
git reset HEAD <name_file>		- After add <name_file> to the stage we can remove that's file from the stage

git reset <hash> --mixed		- You go to <hash> status by deleting files you don't use but leave modify files
git reset <hash> --soft			- You go to <hash> status by deleting files you don't use but leave modify files and add there to the stage 
git reset <hash> --hard			- You go to <hash> status by pernament deleting files add after <hash> time

git diff				- It shows you what you changed in the files when files have status modify 

git commit				- After adding files you can create a commit with changes you have made
git commit -m "..."			- Create a commit with comment in "..."

git checkout --<name_file>		- If you modify file in your folder and you want to come back status before change file, you can use this command to time travel

git checkout <hash>			- You go to <hash> status. You are in deached HEAD. It's mean you are on middle of nowhere. You can experimental on this side or create a new branch stariting in this step.
>git checkout <branch>			- If you want come back to original branch
git checkout <hash> <name_file>		- Restore status <new_file> from <hash> time

git revert <hash>			- Revert changes in commit from <hash> time


git rm <name_file>			- Remove <name_file> from the local repository

git mv <old_pathfile> <new_pathfile>	- Moving file from <old_pathfile> to <new_pathfile>  

git push				- Pushing changes to remote repository on your currently branch
git push -u <origin> <branch>		- Pushing changes to remote <origin> repository on <branch>


git config --global core editor xxx	- Change text editor to xxx (lists of text editors we can find in github page)


git log					- Show changes in your repository - commits
git log --oneline			- Show commits with short hash and short description
git log --all				- Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>
git log --decorate			- Print out the ref names of any commits that are shown
git log --graph				- Create graph with branches
git log --author="..."			- Show commits from author "..."
git log --grep="..."			- Show commits have "..." inside comment
git log -x				- Show "x" last commits
git log --<name file>			- Show commits about <name file>
git log --patch --<name file>		- Show commits and changes from <name file>
git log --summary			- Show short info what changes were in the file
git shortlog				- Show short info about changes with division on authors




___ --- ___ --- ___ --- ___ --- ___ --- ___
Restore file after you deleting in your local repository:

git add <new_file>
git commit
git rm <new_file>
git reset or git reset HEAD <new_file>
git checkout <new_file>

___ --- ___ --- ___ --- ___ --- ___ --- ___
Create a Fork repository:

If you want to copy the repository from the account without access to it, you must use the fork option inside the desired repository.
Next step is download repository to your local computer.

git clone <https://name_user@github.com/...>  #use name_user when you are working with two accounts in one computer

create a new branch

git branch <new_branch>
git checkout <new_branch>

When your workings end, then you can using git add and git commit in your <new_branch>.
Next step is push changes to your fork repository.

git push -u <origin> <new_branch>

You must use pull request in the github account page from your take a fork repository.

Create pull request

User the original repository can merge pull request

After that you clen the local and remote repository from master branch.

git checkout master

git branch -D <new_branch>

git push origin --delete <new_branch>	- Delete <new branch> in remote repository.

Then you can add remote repository to your account.

git remote add <upstream> <https://github...>

The last step is upgrade between two repository

git merge <upstream/master>

git push

___ --- ___ --- ___ --- ___ --- ___ --- ___
Merge conflicts:






















